import pygame
import socket
import threading
import pickle
import random
import time

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Ä–∞–Ω–∞
WIDTH, HEIGHT = 1200, 700
PLAYER_SIZE = 29
BULLET_SIZE = 5
BOMB_SIZE = 15
FRAGMENT_SIZE = 10
FRAGMENT_COUNT = 100  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–∫–æ–ª–∫–æ–≤ –æ—Ç –æ–¥–Ω–æ–π –±–æ–º–±—ã
FPS = 60

# –¶–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–æ–≤, –ø—É–ª—å, –±–æ–º–±, –æ—Å–∫–æ–ª–∫–æ–≤
COLORS = [(0, 255, 0), (255, 0, 0)]  # –ó–µ–ª–µ–Ω—ã–π –∏ –∫—Ä–∞—Å–Ω—ã–π
BULLET_COLORS = [(0, 128, 0), (128, 0, 0)]
BOMB_COLOR = (255, 255, 0)
FRAGMENT_COLOR = (255, 165, 0)

# –¶–≤–µ—Ç–∞
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREY = (169, 169, 169)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä–æ–∫–æ–≤
positions = [[WIDTH // 4, HEIGHT // 2], [3 * WIDTH // 4, HEIGHT // 2]]
directions = [[0, -1], [0, -1]]  # –ù–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –≤–≤–µ—Ä—Ö
bullets = [[], []]  # –ü—É–ª–∏ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
bombs = [[], []]  # –ë–æ–º–±—ã –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
fragments = []  # –û—Å–∫–æ–ª–∫–∏
health = [100, 100]  # –ó–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–æ–≤
scores = [0, 0]  # –û—á–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
bomb_limits = [3, 3]  # –õ–∏–º–∏—Ç –±–æ–º–± –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞


# –ê–ø—Ç–µ—á–∫–∏ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
health_packs = []
speed_packs = []
power_up_time = time.time()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame
pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("–°–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞ —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –∏ –æ—á–∫–∞–º–∏")
clock = pygame.time.Clock()

# –ó–≤—É–∫ –ø–æ–ø–∞–¥–∞–Ω–∏—è
hit_sound = pygame.mixer.Sound("sound/laser-blast-descend_gy7c5deo.mp3")
hit_sound1 = pygame.mixer.Sound("sound/[–ò–∑ –∞–Ω–∏–º–µ –ù–∞—Ä—É—Ç–æ [vkhp.net] - –ò—Ç–∞—á–∏ –ø—Ä–æ—Ç–∏–≤ –°–∞—Å–∫–µ, –±–∏—Ç–≤–∞].mp3")
bomb3_set_sound = pygame.mixer.Sound("sound/bombpl.mp3")  # –ó–≤—É–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ–º–±—ã
bomb_explode_sound = pygame.mixer.Sound("sound/vasa.mp3")  # –ó–≤—É–∫ –≤–∑—Ä—ã–≤–∞ –±–æ–º–±—ã
bomb1_explode_sound = pygame.mixer.Sound("sound/laser-sword-hum_m14hvyno (1).mp3")  # –ó–≤—É–∫ –≤–∑—Ä—ã–≤–∞ –±–æ–º–±—ã

# –°–µ—Ç–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
server_socket = None
client_socket = None
is_server = False
running = True



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∞–ø—Ç–µ—á–µ–∫ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–π
power_up_time = time.time()  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞

def generate_powerups():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ø—Ç–µ—á–µ–∫ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ"""
    global power_up_time  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

    if time.time() - power_up_time > 19:  # –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        # –ê–ø—Ç–µ—á–∫–∞
        health_packs.append([random.randint(50, WIDTH-50), random.randint(50, HEIGHT-50)])
        # –£—Å–∫–æ—Ä–µ–Ω–∏–µ
        speed_packs.append([random.randint(50, WIDTH-50), random.randint(50, HEIGHT-50)])
        power_up_time = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è


def handle_client(client_conn):
    global positions, directions, bullets, bombs, fragments, health, scores, running
    while running:
        try:
            data = client_conn.recv(1024)
            if not data:
                break
            client_data = pickle.loads(data)
            positions[1] = client_data['position']
            directions[1] = client_data['direction']
            bullets[1] = client_data['bullets']
            bombs[1] = client_data['bombs']
            health[1] = client_data['health']
            scores[1] = client_data['score']
            server_data = {
                'position': positions[0],
                'direction': directions[0],
                'bullets': bullets[0],
                'bombs': bombs[0],
                'health': health[0],
                'score': scores[0]
            }
            client_conn.send(pickle.dumps(server_data))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            break
    client_conn.close()

def start_server():
    global server_socket, running
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('0.0.0.0', 12345))
    server_socket.listen(1)
    print("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    client_conn, addr = server_socket.accept()
    print(f"–ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {addr}")
    threading.Thread(target=handle_client, args=(client_conn,)).start()

def connect_to_server(ip):
    global client_socket, positions, directions, bullets, bombs, health, scores, running
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((ip, 12345))
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å–ø–µ—à–Ω–æ!")
    while running:
        try:
            client_data = {
                'position': positions[1],
                'direction': directions[1],
                'bullets': bullets[1],
                'bombs': bombs[1],
                'health': health[1],
                'score': scores[1]
            }
            client_socket.send(pickle.dumps(client_data))
            server_data = pickle.loads(client_socket.recv(1024))
            positions[0] = server_data['position']
            directions[0] = server_data['direction']
            bullets[0] = server_data['bullets']
            bombs[0] = server_data['bombs']
            health[0] = server_data['health']
            scores[0] = server_data['score']
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            break
    client_socket.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
def draw_end_screen(winner):
    screen.fill((30, 30, 30))
    font = pygame.font.Font(None, 74)
    text = font.render(f"{winner} –ø–æ–±–µ–¥–∏–ª!", True, (255, 255, 255))
    screen.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT // 3))
    pygame.display.flip()
    pygame.time.wait(3000)

# –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è, –æ—á–∫–æ–≤ –∏ –±–æ–º–±
font = pygame.font.Font(None, 36)

# –¶–≤–µ—Ç–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
def get_health_color(health_value):
    if health_value > 70:
        return (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π (–≤—ã—Å–æ–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ)
    elif health_value > 30:
        return (255, 255, 0)  # –ñ–µ–ª—Ç—ã–π (—Å—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ)
    else:
        return (255, 0, 0)  # –ö—Ä–∞—Å–Ω—ã–π (–Ω–∏–∑–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤ –±–æ–º–±
def draw_bombs(x, y, count):
    for i in range(count):
        bomb_text = font.render("üí£", True, (255, 255, 255))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª –±–æ–º–±—ã
        screen.blit(bomb_text, (x + i * 30, y))  # –†–∞–∑–º–µ—â–∞–µ–º –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω–µ


def game_loop(player_id):
    global positions, directions, bullets, bombs, fragments, health, scores, running, bomb_limits
    lazarus_active = [False, False]  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ –õ–∞–∑–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    lazarus_timer = [0, 0]  # –¢–∞–π–º–µ—Ä –¥–ª—è –õ–∞–∑–µ—Ä–∞
    lazarus_positions = [None, None]  # –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è –õ–∞–∑–µ—Ä–∞
    lazarus_directions = [None, None]  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –õ–∞–∑–µ—Ä–∞

    shield_active = [False, False]  # –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ —â–∏—Ç
    shield_timer = [0, 0]  # –¢–∞–π–º–µ—Ä –¥–ª—è —â–∏—Ç–∞
    shield_used = [False, False]  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ —â–∏—Ç –∑–∞ –∏–≥—Ä—É





    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:# –°—Ç—Ä–µ–ª—å–±–∞
                if event.key == pygame.K_SPACE:


                    hit_sound.play()
                    hit_sound.set_volume(0.2)

                    bullets[player_id].append({
                        'pos': positions[player_id][:],
                        'dir': directions[player_id][:],
                        'speed': 20
                    })


                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ–º–±—ã
                if event.key == pygame.K_b and bomb_limits[player_id] > 0:
                    bomb3_set_sound.play()
                    bombs[player_id].append({
                        'pos': positions[player_id][:],
                        'dir': directions[player_id][:],
                        'speed': 10,
                        'timer': 50
                    })
                    bomb_limits[player_id] -= 1

                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ–º–±—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å–∫–æ–ª–∫–æ–≤
                if event.key == pygame.K_v:  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ–º–±—ã
                    bomb_explode_sound.play()
                    for bomb in bombs[player_id]:
                        for _ in range(120):  # –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ—Å–∫–æ–ª–∫–æ–≤
                            fragment = {
                                'pos': bomb['pos'][:],  # –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –±–æ–º–±—ã
                                'dir': [random.uniform(-1, 1), random.uniform(-1, 1)],  # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                                'speed': 0.7,  # –°–∫–æ—Ä–æ—Å—Ç—å –æ—Å–∫–æ–ª–∫–æ–≤
                                'timer': 50  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –æ—Å–∫–æ–ª–∫–∞
                            }
                            fragments.append(fragment)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç
                        bombs[player_id].remove(bomb)  # –£–¥–∞–ª—è–µ–º –±–æ–º–±—É –ø–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞


                # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –õ–∞–∑–µ—Ä–∞
                if event.key == pygame.K_p and not lazarus_active[player_id]:  # –õ–∞–∑–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑
                    bomb1_explode_sound.play()
                    bomb1_explode_sound.set_volume(300)
                    lazarus_active[player_id] = True
                    lazarus_timer[player_id] = 118 # 3 —Å–µ–∫—É–Ω–¥—ã (60 FPS * 3)
                    lazarus_positions[player_id] = positions[player_id][:]
                    lazarus_directions[player_id] = directions[player_id][:]


                # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —â–∏—Ç–∞
                if event.key == pygame.K_c and not shield_used[player_id]:
                    shield_active[player_id] = True
                    shield_timer[player_id] = 580  # 3 —Å–µ–∫—É–Ω–¥—ã (60 FPS * 3)
                    shield_used[player_id] = True  # –©–∏—Ç –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –∏–≥—Ä—É


                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —â–∏—Ç–∞
        for i in range(len(shield_active)):
            if shield_active[i]:
                shield_timer[i] -= 1
                if shield_timer[i] <= 0:
                    shield_active[i] = False  # –©–∏—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ 3 —Å–µ–∫—É–Ω–¥





        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –õ–∞–∑–µ—Ä–∞
        for i in range(len(lazarus_timer)):
            if lazarus_active[i]:
                lazarus_timer[i] -= 1
                if lazarus_timer[i] <= 0:
                    lazarus_active[i] = False  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –õ–∞–∑–µ—Ä–∞
                    lazarus_positions[i] = None
                    lazarus_directions[i] = None

                # –õ–∞–∑–µ—Ä –¥–≤–∏–∂–µ—Ç—Å—è –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
                if lazarus_positions[i]:
                    lazarus_positions[i][0] = positions[i][0]
                    lazarus_positions[i][1] = positions[i][1]
                    lazarus_directions[i] = directions[i][:]

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
                    for j, pos in enumerate(positions):
                        if j != i:  # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
                            laser_rect = pygame.Rect(
                                lazarus_positions[i][0],
                                lazarus_positions[i][1],
                                110, 25  # –†–∞–∑–º–µ—Ä –õ–∞–∑–µ—Ä–∞
                            )
                            player_rect = pygame.Rect(pos[0], pos[1], 40, 40)  # –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–∫–∞
                            if laser_rect.colliderect(player_rect):  # –ï—Å–ª–∏ –ª–∞–∑–µ—Ä –∫–∞—Å–∞–µ—Ç—Å—è –∏–≥—Ä–æ–∫–∞
                                health[j] -= 1


        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –õ–∞–∑–µ—Ä–∞
        for i in range(len(lazarus_positions)):
            if lazarus_active[i] and lazarus_positions[i]:
                laser_start = lazarus_positions[i]
                laser_end = [
                    lazarus_positions[i][0] + lazarus_directions[i][0] * 110,
                    lazarus_positions[i][1] + lazarus_directions[i][1] * 110
                ]
                pygame.draw.line(screen, (255, 0, 0), laser_start, laser_end, 5)  # –ö—Ä–∞—Å–Ω—ã–π –ª–∞–∑–µ—Ä# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –æ—Å–∫–æ–ª–∫–∞–º–∏
        for fragment in fragments:
            for i in range(len(positions)):
                if shield_active[i]:  # –ï—Å–ª–∏ —â–∏—Ç –∞–∫—Ç–∏–≤–µ–Ω, –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ–º –æ—Å–∫–æ–ª–∫–∏
                    fragment_dir = [
                        fragment['pos'][0] - positions[i][0],
                        fragment['pos'][1] - positions[i][1]
                    ]
                    distance = (fragment_dir[0] ** 2 + fragment_dir[1] ** 2) ** 0.5
                    if distance < 50:  # –†–∞–¥–∏—É—Å –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è —â–∏—Ç–∞
                        fragment_dir[0] /= distance
                        fragment_dir[1] /= distance
                        fragment['pos'][0] += fragment_dir[0] * 20  # –û—Ç—Ç–∞–ª–∫–∏–≤–∞–µ–º –æ—Å–∫–æ–ª–æ–∫
                        fragment['pos'][1] += fragment_dir[1] * 20
                else:  # –ï—Å–ª–∏ —â–∏—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–∫–æ–º
                    player_rect = pygame.Rect(positions[i][0], positions[i][1], 40, 40)
                    fragment_rect = pygame.Rect(fragment['pos'][0], fragment['pos'][1], 5, 5)
                    if player_rect.colliderect(fragment_rect):
                        health[i] -= 1  # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —â–∏—Ç–∞
        for i in range(len(shield_active)):
            if shield_active[i]:
                player_rect = pygame.Rect(positions[i][0] - 50, positions[i][1] - 50, 140, 140)
                pygame.draw.ellipse(screen, (0, 0, 250, 128), player_rect, 5)  # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–∏–Ω–∏–π —â–∏—Ç

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —â–∏—Ç–∞
        for i in range(len(shield_active)):
            if shield_active[i]:
                player_rect = pygame.Rect(positions[i][0] - 50, positions[i][1] - 50, 140, 140)
                pygame.draw.ellipse(screen, (0, 0, 255, 128), player_rect, 5)  # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–∏–Ω–∏–π —â–∏—Ç






        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
        pygame.display.flip()


        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–µ–º –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
        keys = pygame.key.get_pressed()
        if player_id == 0:  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (—Å–µ—Ä–≤–µ—Ä)
            if keys[pygame.K_LEFT]:
                directions[0] = [-1, 0]
                positions[0][0] -= 5
            if keys[pygame.K_RIGHT]:
                directions[0] = [1, 0]
                positions[0][0] += 5
            if keys[pygame.K_UP]:
                directions[0] = [0, -1]
                positions[0][1] -= 5
            if keys[pygame.K_DOWN]:
                directions[0] = [0, 1]
                positions[0][1] += 5
        elif player_id == 1:  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–∫–ª–∏–µ–Ω—Ç)
            if keys[pygame.K_a]:
                directions[1] = [-1, 0]
                positions[1][0] -= 5
            if keys[pygame.K_d]:
                directions[1] = [1, 0]
                positions[1][0] += 5
            if keys[pygame.K_w]:
                directions[1] = [0, -1]
                positions[1][1] -= 5
            if keys[pygame.K_s]:
                directions[1] = [0, 1]
                positions[1][1] += 5



        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª—å
        for i, player_bullets in enumerate(bullets):
            for bullet in player_bullets:
                bullet['pos'][0] += bullet['dir'][0] * bullet['speed']
                bullet['pos'][1] += bullet['dir'][1] * bullet['speed']

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                target_id = 1 - i
                if (positions[target_id][0] < bullet['pos'][0] < positions[target_id][0] + PLAYER_SIZE and
                    positions[target_id][1] < bullet['pos'][1] < positions[target_id][1] + PLAYER_SIZE):
                    health[target_id] -= 1
                    scores[i] += 1  # –ó–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –¥–∞–µ—Ç—Å—è 1 –æ—á–∫–æ
                    player_bullets.remove(bullet)
                    # –õ–æ–≥–∏–∫–∞ –≤–∑—Ä—ã–≤–∞ –±–æ–º–±—ã


            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—É–ª—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π —ç–∫—Ä–∞–Ω–∞
            bullets[i] = [b for b in player_bullets if 0 <= b['pos'][0] <= WIDTH and 0 <= b['pos'][1] <= HEIGHT]# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–º–±
        for i, player_bombs in enumerate(bombs):
            for bomb in player_bombs:
                bomb['pos'][0] += bomb['dir'][0] * bomb['speed']
                bomb['pos'][1] += bomb['dir'][1] * bomb['speed']

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–∫–æ–ª–∫–æ–≤
        for fragment in fragments:
            fragment['pos'][0] += fragment['dir'][0] * fragment['speed']
            fragment['pos'][1] += fragment['dir'][1] * fragment['speed']

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∏–≥—Ä–æ–∫–æ–≤
            for i, pos in enumerate(positions):
                if (pos[0] < fragment['pos'][0] < pos[0] + PLAYER_SIZE and pos[1] < fragment['pos'][1] < pos[1] + PLAYER_SIZE):
                    health[i] -= 1  # –£—Ä–æ–Ω –æ—Ç –æ—Å–∫–æ–ª–∫–∞

        fragments = [f for f in fragments if 0 <= f['pos'][0] <= WIDTH and 0 <= f['pos'][1] <= HEIGHT]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
        if health[0] <= 0 or health[1] <= 0:
            running = False
            winner = "–ò–≥—Ä–æ–∫ 2" if health[0] <= 0 else "–ò–≥—Ä–æ–∫ 1"
            draw_end_screen(winner)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ø—Ç–µ—á–µ–∫ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–π
        generate_powerups()


        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø—Ç–µ—á–µ–∫ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–π
        for i, pack in enumerate(health_packs[:]):
            if positions[player_id][0] < pack[0] < positions[player_id][0] + PLAYER_SIZE and \
                positions[player_id][1] < pack[1] < positions[player_id][1] + PLAYER_SIZE:
                health[player_id] = min(100, health[player_id] + 20)  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
                health_packs.remove(pack)
        for i, pack in enumerate(speed_packs[:]):
            if positions[player_id][0] < pack[0] < positions[player_id][0] + PLAYER_SIZE and \
                positions[player_id][1] < pack[1] < positions[player_id][1] + PLAYER_SIZE:
                positions[player_id][0] += directions[player_id][0] * 120  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
                positions[player_id][1] += directions[player_id][1] * 120
                speed_packs.remove(pack)

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤, –ø—É–ª—å, –±–æ–º–±, –æ—Å–∫–æ–ª–∫–æ–≤, –∞–ø—Ç–µ—á–µ–∫ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–π
        screen.fill((0, 0, 0))

# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
        for i, pos in enumerate(positions):
            pygame.draw.rect(screen, COLORS[i], (pos[0], pos[1], PLAYER_SIZE, PLAYER_SIZE))

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—É–ª—å
        for i, player_bullets in enumerate(bullets):
            for bullet in player_bullets:
                pygame.draw.rect(screen, BULLET_COLORS[i], (bullet['pos'][0], bullet['pos'][1], BULLET_SIZE, BULLET_SIZE))

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–º–±
        for i, player_bombs in enumerate(bombs):
            for bomb in player_bombs:
                pygame.draw.circle(screen, BOMB_COLOR, (int(bomb['pos'][0]), int(bomb['pos'][1])), BOMB_SIZE)


        for fragment in fragments:
            pygame.draw.rect(screen, FRAGMENT_COLOR, (fragment['pos'][0], fragment['pos'][1], FRAGMENT_SIZE, FRAGMENT_SIZE))

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞–ø—Ç–µ—á–µ–∫
        for pack in health_packs:
            pygame.draw.rect(screen, (0, 255, 255), (pack[0], pack[1], 20, 20))

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É—Å–∫–æ—Ä–µ–Ω–∏–π
        for pack in speed_packs:
            pygame.draw.rect(screen, (255, 255, 0), (pack[0], pack[1], 20, 20))


        for i, pos in enumerate(positions):
            pygame.draw.rect(screen, COLORS[i], (pos[0], pos[1], PLAYER_SIZE, PLAYER_SIZE))  # –ò–≥—Ä–æ–∫–∏
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
            pygame.draw.rect(screen, (255, 255, 255), (pos[0], pos[1] - 10, PLAYER_SIZE, 5))  # –ë–µ–ª–∞—è –ø–æ–ª–æ—Å–∞
            pygame.draw.rect(screen, (0, 255, 0), (pos[0], pos[1] - 10, PLAYER_SIZE * health[i] // 100, 5))  # –ó–¥–æ—Ä–æ–≤—å–µ

        for i, pos in enumerate(positions):
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞
            pygame.draw.rect(screen, COLORS[i], (pos[0], pos[1], PLAYER_SIZE, PLAYER_SIZE))# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            health_text_1 = font.render(
                f"–ò–≥—Ä–æ–∫ 1 –ó–¥–æ—Ä–æ–≤—å–µ: {health[0]} –û—á–∫–∏: {scores[0]}",
                True,
                get_health_color(health[0])
            )
            health_text_2 = font.render(
                f"–ò–≥—Ä–æ–∫ 2 –ó–¥–æ—Ä–æ–≤—å–µ:-{health[1]}-–û—á–∫–∏:-{scores[1]}",
                True,
                get_health_color(health[1])
            )

            # –†–∏—Å—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            screen.blit(health_text_1, (10, 10))
            draw_bombs(300, 10, bomb_limits[0])  # –ë–æ–º–±—ã –¥–ª—è –ò–≥—Ä–æ–∫–∞ 1

            screen.blit(health_text_2, (10, 50))
            draw_bombs(300, 50, bomb_limits[1])  # –ë–æ–º–±—ã –¥–ª—è –ò–≥—Ä–æ–∫–∞ 2



            # –§–æ–Ω –ø–æ–ª–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è
            pygame.draw.rect(screen, (255, 255, 255), (pos[0], pos[1] - 15, PLAYER_SIZE, 8))  # –ë–µ–ª–∞—è –ø–æ–ª–æ—Å–∞

            # –§–æ–Ω –ø–æ–ª–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è
            pygame.draw.rect(screen, (255, 255, 255), (pos[0], pos[1] - 15, PLAYER_SIZE, 8))  # –ë–µ–ª–∞—è –ø–æ–ª–æ—Å–∞
        for i, pos in enumerate(positions):
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞
            pygame.draw.rect(screen, COLORS[i], (pos[0], pos[1], PLAYER_SIZE, PLAYER_SIZE))

            # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è —à–∫–∞–ª–∞ –∑–¥–æ—Ä–æ–≤—å—è
            for x in range(PLAYER_SIZE * health[i] // 100):
                color = (255 - int(255 * x / PLAYER_SIZE), int(255 * x / PLAYER_SIZE), 0)  # –û—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ –∫ –∑–µ–ª–µ–Ω–æ–º—É
                pygame.draw.line(screen, color, (pos[0] + x, pos[1] - 15), (pos[0] + x, pos[1] - 7))



        pygame.display.flip()
        clock.tick(FPS)



def main():
    global is_server, running

    choice = input("–í–≤–µ–¥–∏—Ç–µ 's' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ 'c' –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ").strip().lower()

    if choice == 's'  :
        hit_sound1.play()
        hit_sound1.set_volume(0.05)
        is_server = True
        threading.Thread(target=start_server).start()
        game_loop(0)  # –°–µ—Ä–≤–µ—Ä - –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫

    elif choice == 'c' :
        server_ip = input("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: ").strip()
        threading.Thread(target=connect_to_server, args=(server_ip,)).start()
        game_loop(1)  # –ö–ª–∏–µ–Ω—Ç - –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã—Ö–æ–¥...")
        running = False

main()